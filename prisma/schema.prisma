generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id          Int      @id @default(autoincrement())
  companyName String   @unique @map("company_name") @db.VarChar(100)
  companyCode String   @unique @map("company_code") @db.VarChar(50)
  userCount   Int      @default(0) @map("user_count")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  users          User[]
  cars           Car[]
  customers      Customer[]
  contracts      Contract[]
  dashboardStats DashboardStat[]
  uploads        Upload[]

  @@index([companyCode])
  @@map("companies")
}

model User {
  id             Int       @id @default(autoincrement())
  companyId      Int       @map("company_id")
  name           String    @db.VarChar(50)
  email          String    @unique @db.VarChar(100)
  employeeNumber String    @map("employee_number") @db.VarChar(50)
  phoneNumber    String    @map("phone_number") @db.VarChar(20)
  password       String    @db.VarChar(255)
  isAdmin        Boolean   @default(false) @map("is_admin")
  imageUrl       String?   @map("image_url") @db.VarChar(255)
  isActive       Boolean   @default(true) @map("is_active")
  lastLoginAt    DateTime? @map("last_login_at")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  deletedAt      DateTime? @map("deleted_at")

  company      Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  contracts    Contract[]
  uploadedDocs ContractDocument[] @relation("UploadedDocuments")
  uploads      Upload[]

  @@index([email])
  @@index([companyId])
  @@map("users")
}

model Car {
  id                Int       @id @default(autoincrement())
  companyId         Int       @map("company_id")
  carNumber         String    @map("car_number") @db.VarChar(20)
  manufacturer      String    @db.VarChar(50)
  model             String    @db.VarChar(100)
  type              CarType?  @map("car_type")
  manufacturingYear Int       @map("manufacturing_year")
  mileage           Int
  price             Decimal   @db.Decimal(12, 0)
  accidentCount     Int       @default(0) @map("accident_count")
  explanation       String?   @db.Text
  accidentDetails   String?   @map("accident_details") @db.Text
  status            CarStatus @default(POSSESSION)
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  deletedAt         DateTime? @map("deleted_at")

  company   Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  contracts Contract[]

  @@unique([companyId, carNumber])
  @@index([carNumber])
  @@index([model])
  @@index([status])
  @@index([deletedAt])
  @@map("cars")
}

model Customer {
  id            Int       @id @default(autoincrement())
  companyId     Int       @map("company_id")
  name          String    @db.VarChar(50)
  gender        Gender    @map("gender")
  phoneNumber   String    @map("phone_number") @db.VarChar(20)
  ageGroup      AgeGroup? @map("age_group")
  region        Region?   @map("region")
  email         String    @db.VarChar(100)
  memo          String?   @db.Text
  contractCount Int       @default(0) @map("contract_count")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  deletedAt     DateTime? @map("deleted_at")

  company   Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  contracts Contract[]

  @@index([name])
  @@index([email])
  @@index([deletedAt])
  @@map("customers")
}

model Contract {
  id         Int            @id @default(autoincrement())
  companyId  Int            @map("company_id")
  carId      Int            @map("car_id")
  customerId Int            @map("customer_id")
  userId     Int            @map("user_id")
  status     ContractStatus @default(CAR_INSPECTION)

  contractDate      DateTime?  @map("contract_date")
  contractPrice     Decimal?   @map("contract_price") @db.Decimal(12, 0)
  resolutionDate    DateTime?  @map("resolution_date")
  possession        Possession @default(PENDING)
  contractCompleted Boolean    @default(false) @map("contract_completed")
  createdAt         DateTime   @default(now()) @map("created_at")
  updatedAt         DateTime   @updatedAt @map("updated_at")
  deletedAt         DateTime?  @map("deleted_at")

  company           Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  car               Car                @relation(fields: [carId], references: [id], onDelete: Cascade)
  customer          Customer           @relation(fields: [customerId], references: [id], onDelete: Cascade)
  user              User               @relation(fields: [userId], references: [id])
  contractDocuments ContractDocument[]
  meetings          Meeting[]

  @@index([status])
  @@index([deletedAt])
  @@map("contracts")
}

model ContractDocument {
  id           Int       @id @default(autoincrement())
  contractId   Int       @map("contract_id")
  documentName String    @map("document_name") @db.VarChar(255)
  fileName     String    @map("file_name") @db.VarChar(255)
  filePath     String    @map("file_path") @db.VarChar(500)
  fileSize     Int       @map("file_size")
  fileType     String    @map("file_type") @db.VarChar(50)
  uploadedBy   Int       @map("uploaded_by")
  createdAt    DateTime  @default(now()) @map("created_at")
  deletedAt    DateTime? @map("deleted_at")

  contract Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  uploader User     @relation("UploadedDocuments", fields: [uploadedBy], references: [id])

  @@index([contractId])
  @@index([deletedAt])
  @@map("contract_documents")
}

model DashboardStat {
  id                  Int      @id @default(autoincrement())
  companyId           Int      @map("company_id")
  statsDate           DateTime @map("stats_date") @db.Date
  monthlySales        Decimal  @default(0) @map("monthly_sales") @db.Decimal(15, 0)
  proceedingContracts Int      @default(0) @map("proceeding_contracts")
  completedContracts  Int      @default(0) @map("completed_contracts")
  salesByCarType      Json     @map("sales_by_car_type")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, statsDate])
  @@index([statsDate])
  @@map("dashboard_stats")
}

model Upload {
  id               Int          @id @default(autoincrement())
  companyId        Int          @map("company_id")
  userId           Int          @map("user_id")
  fileName         String       @map("file_name") @db.VarChar(255)
  fileType         UploadType   @map("upload_type")
  status           UploadStatus @default(PENDING)
  totalRecords     Int          @default(0) @map("total_records")
  processedRecords Int          @default(0) @map("processed_records")
  successRecords   Int          @default(0) @map("success_records")
  failedRecords    Int          @default(0) @map("failed_records")
  errorMessage     String?      @map("error_message") @db.Text
  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @updatedAt @map("updated_at")

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id])

  @@index([status])
  @@index([createdAt])
  @@map("uploads")
}

model Meeting {
  id         Int      @id @default(autoincrement())
  date       DateTime
  contractId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  contract Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)

  alarms Alarm[]

  @@index([contractId])
  @@map("meetings")
}

model Alarm {
  id        Int      @id @default(autoincrement())
  time      DateTime
  meetingId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  meeting Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)

  @@index([meetingId])
  @@map("alarms")
}

// Enums
enum CarStatus {
  POSSESSION          @map("possession")
  CONTRACT_PROCEEDING @map("contractProceeding")
  CONTRACT_COMPLETED  @map("contractCompleted")

  @@map("car_status")
}

enum Gender {
  MALE   @map("male")
  FEMALE @map("female")

  @@map("gender")
}

enum AgeGroup {
  TWENTIES  @map("20대")
  THIRTIES  @map("30대")
  FORTIES   @map("40대")
  FIFTIES   @map("50대")
  SIXTIES   @map("60대")
  SEVENTIES @map("70대")
  EIGHTIES  @map("80대")
  TEENAGER  @map("10대")

  @@map("age_group")
}

enum ContractStatus {
  CAR_INSPECTION      @map("car_inspection")
  PRICE_NEGOTIATION   @map("price_negotiation")
  CONTRACT_DRAFT      @map("contractDraft")
  CONTRACT_SUCCESSFUL @map("contract_successful")
  CONTRACT_FAILED     @map("contract_failed")

  @@map("contract_status")
}

enum Possession {
  PENDING    @map("pending")
  PROCESSING @map("processing")
  COMPLETED  @map("completed")

  @@map("possession")
}

enum UploadType {
  CAR      @map("car")
  CUSTOMER @map("customer")

  @@map("upload_type")
}

enum UploadStatus {
  PENDING    @map("pending")
  PROCESSING @map("processing")
  COMPLETED  @map("completed")
  FAILED     @map("failed")

  @@map("upload_status")
}

enum CarType {
  COMPACT  @map("경·소형")
  MIDSIZE  @map("준중·중형")
  FULLSIZE @map("대형")
  SPORTS   @map("스포츠카")
  SUV      @map("SUV")

  @@map("car_type")
}

enum Region {
  SEOUL     @map("서울")
  GYEONGGI  @map("경기")
  INCHEON   @map("인천")
  GANGWON   @map("강원")
  CHUNGBUK  @map("충북")
  CHUNGNAM  @map("충남")
  SEJONG    @map("세종")
  DAEJEON   @map("대전")
  JEONBUK   @map("전북")
  JEONNAM   @map("전남")
  GWANGJU   @map("광주")
  GYEONGBUK @map("경북")
  GYEONGNAM @map("경남")
  DAEGU     @map("대구")
  ULSAN     @map("울산")
  BUSAN     @map("부산")
  JEJU      @map("제주")

  @@map("region")
}
